g2 <- ggplot(mtcars, aes(x=wt, y=fit2res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
xlab("Weight (1000 lbs)") + ylab("Miles/(US) gallon") +
scale_color_discrete(name ="Transmission Type")
grid.arrange(g1, g2, nrow = 2)
g1 <- ggplot(mtcars, aes(x=wt, y=fit1res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
ggtitle("Figure 3: Plot of MPG by Weight According to Tranmission Type") +
xlab("") + ylab("Residual Error \"Miles/(US) gallon"") +
scale_color_discrete(name ="Transmission Type")
g1 <- ggplot(mtcars, aes(x=wt, y=fit1res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
ggtitle("Figure 3: Plot of MPG by Weight According to Tranmission Type") +
xlab("") + ylab("Residual Error \"Miles/(US) gallon") +
scale_color_discrete(name ="Transmission Type")
g2 <- ggplot(mtcars, aes(x=wt, y=fit2res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
xlab("Weight (1000 lbs)") + ylab("Residual Error \"Miles/(US) gallon"") +
scale_color_discrete(name ="Transmission Type")
g1 <- ggplot(mtcars, aes(x=wt, y=fit1res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
ggtitle("Figure 3: Plot of MPG by Weight According to Tranmission Type") +
xlab("") + ylab("Residual Error \"Miles/(US) gallon") +
scale_color_discrete(name ="Transmission Type")
g2 <- ggplot(mtcars, aes(x=wt, y=fit2res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
xlab("Weight (1000 lbs)") + ylab("Residual Error \"Miles/(US) gallon") +
scale_color_discrete(name ="Transmission Type")
grid.arrange(g1, g2, nrow = 2)
g1 <- ggplot(mtcars, aes(x=wt, y=fit1res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
ggtitle("Figure 3: Plot of MPG by Weight According to Tranmission Type") +
xlab("") + ylab("") +
scale_color_discrete(name ="Transmission Type")
g2 <- ggplot(mtcars, aes(x=wt, y=fit2res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
xlab("Weight (1000 lbs)") + ylab("Residual Error \"Miles/(US) gallon") +
scale_color_discrete(name ="Transmission Type")
grid.arrange(g1, g2, nrow = 2)
g1 <- ggplot(mtcars, aes(x=wt, y=fit1res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
ggtitle("Figure 3: Plot of MPG by Weight According to Tranmission Type") +
xlab("") + ylab("") +
scale_color_discrete(name ="Transmission Type")
g2 <- ggplot(mtcars, aes(x=wt, y=fit2res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
xlab("Weight (1000 lbs)") + ylab("Residual Error (Miles/(US) gallon)") +
scale_color_discrete(name ="Transmission Type")
grid.arrange(g1, g2, nrow = 2)
g1 <- ggplot(mtcars, aes(x=wt, y=fit1res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
ggtitle("Figure 3: Residual Error of fit 1 and fit 2") +
xlab("") + ylab("") +
scale_color_discrete(name ="Transmission Type")
g2 <- ggplot(mtcars, aes(x=wt, y=fit2res, color=am)) +
geom_point() +
geom_smooth(method=lm, se=TRUE, fullrange=FALSE, level=0.95) +
xlab("Weight (1000 lbs)") + ylab("Residual Error (Miles/(US) gallon)") +
scale_color_discrete(name ="Transmission Type")
grid.arrange(g1, g2, nrow = 2)
fit2
fit2$Coefficients
fit2$coefficients
fit2$coefficients[1]-fit2$coefficients[2]
fit2$coefficients[1]-fit2$coefficients[3]
fit2$coefficients[3]/fit2$coefficients[4]
abs(fit2$coefficients[3]/fit2$coefficients[4])
abs(fit2$coefficients[3]/fit2$coefficients[4])[0]
abs(fit2$coefficients[3]/fit2$coefficients[4])[1]
abs(fit2$coefficients[3]/fit2$coefficients[4])[0]
value(abs(fit2$coefficients[3]/fit2$coefficients[4]))
abs(fit2$coefficients[3]/fit2$coefficients[4]))$amManual
abs(fit2$coefficients[3]/fit2$coefficients[4]))
abs(fit2$coefficients[3]/fit2$coefficients[4])
abs(fit2$coefficients[3]/fit2$coefficients[4])$amManual
abs(fit2$coefficients[3]/fit2$coefficients[4])
paste(abs(fit2$coefficients[3]/fit2$coefficients[4]))
paste(abs(fit2$coefficients[3]/fit2$coefficients[4]), 3)
paste(round(abs(fit2$coefficients[3]/fit2$coefficients[4]),2)
)
paste(round(abs(fit2$coefficients[3]/fit2$coefficients[4]),2)*1000
)
paste(round(abs(fit2$coefficients[3]/fit2$coefficients[4]),2)*1000)
require(ggplot2)
require(gridExtra)
install.packages("pgmm")
install.packages("pgmm")
getwd(
)
codeload
-code-load()-/code- function in R
-code-load()-
-code-load()
?-code-load()-
?
0
???
c?ode
?-code-load("olive.rda")-
-code-load("olive.rda")-
-code-load("olive.rda")-
library(pgmm)
install.packages("pgmm")
install.packages("pgmm_1.2.tar.gz")
install.packages("pgmm_1.2.tar.gz1")
install.packages(pgmm_1.2.tar.gz)
getwd()
install.packages(pgmm_1.2.tar.gz)
install.packages(pgmm_1.2.tar.gz, repos = NULL, type="source")
rtools
install.packages("rtools")
install.packages("pgmm_1.2.tar.gz", repos = NULL, type="source")
library(pgmm)
load("olive.rda")
load("olive.rda")
install.packages("ElemStatLearn")
package.install("pgmm")
packages.install("pgmm")
install.packages("pgmm")
install.packages("gbm")
install.packages("forecast")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(rpart)
library(gbm)
library(caret)
library(rpart)
set.seed(800815)
setwd('C:/Users/Mike/Desktop/PracticalMachineLearning')
trainingdata <- read.csv('pml-training.csv')
inTrain <- createDataPartition(trainingdata$classe, p = 3/4)[[1]]
training <- trainingdata[inTrain,]
predictor_cols <- colSums(is.na(training)) == 0
training <-training[,predictor_cols]
testing <- trainingdata[-inTrain,]
testing <- testing[,predictor_cols]
head(training)
nzv_data <- nearZeroVar(training, freqCut = 54/48, saveMetrics = T)
nzv_cols <- nearZeroVar(training, freqCut = 54/48)
nzv_data
training <- training[,-nzv_cols]
testing <- testing[,-nzv_cols]
training$classe <- trainingdata[inTrain,]$classe
MyTreeFit <- rpart(classe ~ ., data = subset(training, select = -c(user_name, X)), method="class")
prediction <- predict(MyTreeFit, subset(testing, select = -c(user_name, X)), type = "class")
AccuracyRPART <- sum(prediction == trainingdata[-inTrain,]$classe)/dim(testing)[1]
paste("My regression tree accuracy is", AccuracyRPART,".")
boosted_model <- train(d[,-47],d[,47],method="gbm")
boosted_model <- train(subset(training, select = -c(user_name, X))[,-47],subset(training, select = -c(user_name, X))[,47],method="gbm")
subset(training, select = -c(user_name, X))[1,47]
subset(training, select = -c(user_name, X))[1,46]
boosted_model <- train(d[,-46],d[,46],method="gbm")
boosted_model <- train(subset(training, select = -c(user_name, X))[,-46],subset(training, select = -c(user_name, X))[,46],method="gbm")
prediction <- predict(boosted_model, subset(testing, select = -c(user_name, X)))
AccuracyGBM <- sum(trainingdata[-inTrain,]$classe == prediction)/length(trainingdata[-inTrain,]$classe)
paste("My GBM accuracy is", AccuracyGBM,".")
AccuracyGBM
paste(round(AccuracyRPART*100,2),"%")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(rpart)
library(gbm)
library(caret)
library(rpart)
set.seed(800815)
nzv_data <- nearZeroVar(training, freqCut = 54/48, saveMetrics = T)
nzv_cols <- nearZeroVar(training, freqCut = 54/48)
garbage <- capture.output(MyTreeFit <- rpart(classe ~ ., data = subset(training, select = -c(user_name, X)), method="class"))
prediction <- predict(MyTreeFit, subset(testing, select = -c(user_name, X)), type = "class")
AccuracyRPART <- sum(prediction == trainingdata[-inTrain,]$classe)/dim(testing)[1]
paste("My regression tree accuracy is", AccuracyRPART,".")
boosted_model
library(rpart.plot)
rpart.plot(MyTreeFit)
rpart.plot(MyTreeFit)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(rpart)
library(gbm)
library(caret)
library(rpart)
library(rpart.plot)
set.seed(800815)
PredSet <- PredSet[, predictor_col]
setwd('C:/Users/Mike/Desktop/PracticalMachineLearning')
trainingdata <- read.csv('pml-training.csv')
PredSet <- read.csv('pml-testing.csv')
inTrain <- createDataPartition(trainingdata$classe, p = 3/4)[[1]]
training <- trainingdata[inTrain,]
predictor_cols <- colSums(is.na(training)) == 0
training <-training[,predictor_cols]
testing <- trainingdata[-inTrain,]
testing <- testing[,predictor_cols]
PredSet <- PredSet[, predictor_col]
setwd('C:/Users/Mike/Desktop/PracticalMachineLearning')
trainingdata <- read.csv('pml-training.csv')
PredSet <- read.csv('pml-testing.csv')
inTrain <- createDataPartition(trainingdata$classe, p = 3/4)[[1]]
training <- trainingdata[inTrain,]
predictor_cols <- colSums(is.na(training)) == 0
training <-training[,predictor_cols]
testing <- trainingdata[-inTrain,]
testing <- testing[,predictor_cols]
PredSet <- PredSet[, predictor_cols]
PredSet <- PredSet[,-nzv_cols]
PredSetPrediction <- predict(boosted_model, PredSet)
PredSet
PredSet <- PredSet[, predictor_cols]
mean
predict
lm
dgammma
colSums
show
range(1,2)
range(1,2, 0.5)
range(2, 0.5)
seq(1,5)
seq(1,5, 0.5)
GenFreq <- function(low_cm, high_cm, interval_cm) {
cms <- seq(low_cm,high_cm, interval_cm)
}
GenFreq(1,2,0.5)
GenFreq <- function(low_cm, high_cm, interval_cm) {
cms <- seq(low_cm,high_cm, interval_cm)
return(cms)
}
GenFreq(1,2,0.5)
c <- 29979245800 #cm/s
10000/4197
100000/4197
1000/4197
10000/4197
0.01/4197
Freq <- GenFreq(4000,4100,0.1)
Wavelengths <- 0.01/Freq
Wavelengths
Distances <- seq(0,2,760e-9)
Distances <- seq(0,0.02,760e-9)
rep(1, each=10)
Freq <- GenFreq(4000,4100,0.1)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.02,760e-9)
cos(0)
2*pi
sin(1)
sin(pi)
cos(1)
cos(pi)
sin(pi)
sin(2*pi)
Wavelengths[0]
Wavelengths <- 0.01/Freq
Wavelengths
Wavelengths[1]
Distance[2]/Wavelengths[1]
Distances[2]/Wavelengths[1]
Distances[3]/Wavelengths[1]
Distances[5152]/Wavelengths[1]
pi*(Distances[5152]/Wavelengths[1])
sin(pi*(Distances[5152]/Wavelengths[1]))
2*pi*(Distances[5152]/Wavelengths[1])
(Distances[5152]/Wavelengths[1]
)
(Distances[5152]/Wavelengths[1])
floor(Distances[5152]/Wavelengths[1])
remainder(Distances[5152]/Wavelengths[1])
Distances[5152] %% Wavelengths[1]
Distances[5152] / Wavelengths[1]
Distances[5152] mod Wavelengths[1]
mod<-function(x,m)
{
t1<-floor(x/m)
return(x-t1*m)
}
mod(Distances[5152],Wavelengths[1])
floor(Distances[5152] / Wavelengths[1])
Distances[5152] - floor(Distances[5152] / Wavelengths[1])
Distances[5152] - (floor(Distances[5152] / Wavelengths[1]))
(floor(Distances[5152] / Wavelengths[1]))
mod<-function(x,m)
{
t1<-floor(x/m)
return(x/m - t1)
}
mod(Distances[5152],Wavelengths[1])
PhaseDiff<-function(x,m)
{
t1<-floor(x/m)
return(2*pi*(x/m - t1))
}
PhaseDiff(Distances[5152],Wavelengths[1])
PhaseDiff(Distances[5152],Wavelengths[2])
PhaseDiff(Distances[5152],Wavelengths[3])
sin(0)
cos(0)
cos(pi)
PhaseDiff(Distances[1],Wavelengths)
PhaseDiff(Distances[2],Wavelengths)
PhaseDiff<-function(x,m)
{
t1<-floor(x/m)
return((cos(2*pi*(x/m - t1))+1)/2)
}
PhaseDiff(Distances[2],Wavelengths)
plot(PhaseDiff(Distances[2],Wavelengths))
plot(PhaseDiff(Distances[400],Wavelengths))
plot(PhaseDiff(Distances[4000],Wavelengths))
plot(PhaseDiff(Distances[4200],Wavelengths))
plot(PhaseDiff(Distances[1500],Wavelengths))
plot(PhaseDiff(Distances,Wavelengths[1]))
plot(PhaseDiff(Distances,Wavelengths[100]))
plot(PhaseDiff(Distances,Wavelengths[1000]))
plot(PhaseDiff(Distances,Wavelengths[2000]))
plot(PhaseDiff(Distances,Wavelengths[1000]))
PhaseDiff<-function(x,m)
{
t1<-floor(x/m)
values <- (cos(2*pi*(x/m - t1))+1)/2
return(mean(values))
}
plot(PhaseDiff(Distances[1],Wavelengths))
PhaseDiff(Distances[1],Wavelengths)
PhaseDiff(Distances[1],Wavelengths)
PhaseDiff(Distances[2],Wavelengths)
PhaseDiff(Distances[3],Wavelengths)
PhaseDiff(Distances[4],Wavelengths)
PhaseDiff(Distances[5],Wavelengths)
PhaseDiff(Distances[6],Wavelengths)
PhaseDiff(Distances[7],Wavelengths)
PhaseDiff(Distances[8],Wavelengths)
PhaseDiff(Distances[9],Wavelengths)
PhaseDiff(Distances[10],Wavelengths)
PhaseDiff(Distances[1000],Wavelengths)
PhaseDiff(Distances[1800],Wavelengths)
PhaseDiff(Distances[1900],Wavelengths)
apply(Distances, 1, PhaseDiff)
dim(Distances)
class(Distances)
lendth(Distances)
length(Distances)
as.matrix(Distances)
sim(as.matrix(Distances))
dim(as.matrix(Distances))
apply(as.matrix(Distances), 1, PhaseDiff)
apply(as.matrix(Distances), 1, fun=PhaseDiff)
apply(as.matrix(Distances), 1, name <- function(variables) {
}=PhaseDiff)
apply(as.matrix(Distances), 1, FUN=PhaseDiff)
PhaseDiff<-function(x,Wavelengths=m)
{
t1<-floor(x/m)
values <- (cos(2*pi*(x/m - t1))+1)/2
return(mean(values))
}
PhaseDiff<-function(x,Wavelengths=Wavelengths)
{
t1<-floor(x/Wavelengths)
values <- (cos(2*pi*(x/Wavelengths - t1))+1)/2
return(mean(values))
}
PhaseDiff(Distances[1900],Wavelengths)
apply(as.matrix(Distances), 1, FUN=PhaseDiff)
apply(as.matrix(Distances), 1, FUN=PhaseDiff(Wavelengths))
PhaseDiff<-function(x,y=Wavelengths)
{
t1<-floor(x/y)
values <- (cos(2*pi*(x/y - t1))+1)/2
return(mean(values))
}
apply(as.matrix(Distances), 1, FUN=PhaseDiff(Wavelengths))
apply(as.matrix(Distances), 1, FUN=PhaseDiff)
)
apply(as.matrix(Distances), 1, FUN=PhaseDiff))
apply(as.matrix(Distances), 1, FUN=PhaseDiff)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
GenFreq <- function(low_cm, high_cm, interval_cm) {
cms <- seq(low_cm,high_cm, interval_cm)
return(cms)
}
PhaseDiff<-function(x,y=Wavelengths)
{
t1<-floor(x/y)
values <- (cos(2*pi*(x/y - t1))+1)/2
return(mean(values))
}
Freq <- GenFreq(1000,4100,0.1)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.02,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(3900,4100,0.1)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.02,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(3700,4100,0.1)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.02,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(3700,4100,0.1)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.001,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
plot(Distances, apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(3000,4100,0.1)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.001,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(2000,4100,0.1)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.001,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Distances <- seq(0,0.0002,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(4000,4100,0.1)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.0002,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(4000,4100,0.1)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.002,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(3000,4100,0.1)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.002,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(3000,4100,0.05)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.002,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(1000,1200,0.05)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.002,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(500,1200,0.05)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.002,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
GenFreq <- function(low_cm, high_cm, interval_cm) {
cms <- seq(low_cm,high_cm, interval_cm)
return(cms)
}
PhaseDiff<-function(x,y=Wavelengths)
{
t1<-floor(x/y)
values <- (cos(2*pi*(x/y - t1))+1)/2
return(mean(values))
}
Freq <- GenFreq(500,1200,0.03)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.002,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(1000,1200,0.03)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.002,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
Freq <- GenFreq(1100,1200,0.01)
Intensities <- rep(1, each=length(Freq))
Wavelengths <- 0.01/Freq
Distances <- seq(0,0.002,760e-9)
plot(apply(as.matrix(Distances), 1, FUN=PhaseDiff))
plot(Distances, apply(as.matrix(Distances), 1, FUN=PhaseDiff))
shiny::runApp('C:/Users/Mike/Dropbox/MOOC/DDP_2')
runApp('C:/Users/Mike/Dropbox/MOOC/DDP_2')
runApp('C:/Users/Mike/Dropbox/MOOC/DDP_2')
runApp('C:/Users/Mike/Dropbox/MOOC/DDP_2')
runApp('C:/Users/Mike/Dropbox/MOOC/DDP_2')
runApp('C:/Users/Mike/Dropbox/MOOC/DDP_2')
runApp('C:/Users/Mike/Dropbox/MOOC/DDP_2')
runApp('C:/Users/Mike/Dropbox/MOOC/DDP_2')
runApp('C:/Users/Mike/Dropbox/MOOC/DDP_2')
runApp('C:/Users/Mike/Dropbox/MOOC/DDP_2')
publish(user = michaellawson00, repo = DDP_Pres)
library(slidify)
publish(user = michaellawson00, repo = DDP_Pres)
getwd()
cd slidifyDemo
setwd("C:\Users\Mike\Documents\slidifyDemo")
setwd("C:/Users/Mike/Documents/slidifyDemo")
publish(user = michaellawson00, repo = DDP_Pres)
publish(user = "michaellawson00", repo = DDP_Pres)
publish(user = "michaellawson00", repo = "DDP_Pres")
publish(user = "michaellawson00", repo = "DDP_Pres")
git config --global user.email "michaelalanlawson@gmail.com"
publish(user = "michaellawson00", repo = "DDP_Pres")
setwd("C:/Users/Mike/Documents/slidifyDemo")
publish(user = "michaellawson00", repo = "DDP_Pres")
library(slidify)
publish(user = "michaellawson00", repo = "DDP_Pres")
publish(user = "michaellawson00", repo = "DDP_Pres")
